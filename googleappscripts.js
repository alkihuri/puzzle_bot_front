// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    SPREADSHEET_ID: '1qxuDpJwBrzmWynQ4LK5ahUEUMBh9MHFaFmrIvXi8Hzc',
    SHEET_NAME: 'ArticlesTest',
    DRIVE_FOLDER_ID: '1zwJnTYiMYTFBNVmq8_6h12cxMOO2JZ4p',
    TELEGRAM_BOT_TOKEN: '7989929865:AAGJX_N-80Y4ILfTxDhgFufkp2afQPaSY8c',
    ADMIN_CHAT_ID: '-4696414312'
  };
  
function testDoPost() {
    const mockRequest = {
        postData: {
            type: 'application/json',
            contents: JSON.stringify({
                title: "Test Title",
                text: "Test Content",
                type: "Test Type"
            })
        }
    };
    const result = doPost(mockRequest);
    Logger.log(result.getContent());
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
 */
function doGet() { 
    testDoPost(); 
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doPost(e) {
    Logger.log('Received POST request');
    Logger.log(JSON.stringify(e));

    try {
        let data = {};
        let fileUrl = '';

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data
        if (e.postData.type === 'multipart/form-data') {
            data = parseMultipartFormData(e);
            if (data.file) {
                fileUrl = uploadFileToDrive(data.file);
            }
        } else if (e.postData.type === 'application/json') {
            data = JSON.parse(e.postData.contents);
        } else {
            throw new Error('Unsupported content type');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!data.title || !data.text || !data.type) {
            throw new Error('Missing required fields');
        }

        // –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        const recordId = writeToSpreadsheet(data, fileUrl);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        sendTelegramNotification(data, recordId, fileUrl);

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        const response = {
            success: true,
            id: recordId,
            fileUrl: fileUrl
        };

        return ContentService.createTextOutput(JSON.stringify(response))
            .setMimeType(ContentService.MimeType.JSON)
            .setHeader('Access-Control-Allow-Origin', '*')
            .setHeader('Access-Control-Allow-Methods', 'POST')
            .setHeader('Access-Control-Allow-Headers', 'Content-Type');

    } catch (error) {
        Logger.log('Server error: ' + error.message);
        console.error('Server error: ' + error.message);
    }
}
/**
 * –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
 */
function writeToSpreadsheet(data, fileUrl) {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID)
        .getSheetByName(CONFIG.SHEET_NAME);
    
    const recordId = Utilities.formatString('%08d', sheet.getLastRow() + 1);
    const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd.MM.yyyy HH:mm:ss');
    
    sheet.appendRow([
        recordId,          // ID_article
        timestamp,         // date
        data.title,        // title
        data.text,         // text
        fileUrl || '',     // image
        data.study || '',  // study
        data.type,         // type
        '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'     // status
    ]);
    
    return recordId;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive
 */
function uploadFileToDrive(fileData) {
    try {
        const folder = DriveApp.getFolderById(CONFIG.DRIVE_FOLDER_ID);
        const blob = Utilities.newBlob(fileData.bytes, fileData.mimeType, fileData.filename);
        const file = folder.createFile(blob);
        
        file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
        return `https://drive.google.com/file/d/${file.getId()}/view`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        return '';
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 */
function sendTelegramNotification(data, recordId, fileUrl) {
    if (!CONFIG.TELEGRAM_BOT_TOKEN || !CONFIG.ADMIN_CHAT_ID) return;

    try {
        const text = `üìå –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n` +
                                 `üìù *${data.title}*\n` +
                                 `üÜî ID: ${recordId}\n` +
                                 `üìÇ –¢–∏–ø: ${data.type}\n` +
                                 (fileUrl ? `üìé –§–∞–π–ª: [–û—Ç–∫—Ä—ã—Ç—å](${fileUrl})\n` : '') +
                                 `\n_${data.text.substring(0, 100)}..._`;
        
        const response = UrlFetchApp.fetch(
            `https://api.telegram.org/bot${CONFIG.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'post',
                contentType: 'application/json',
                payload: JSON.stringify({
                    chat_id: CONFIG.ADMIN_CHAT_ID,
                    text: text,
                    parse_mode: 'Markdown',
                    disable_web_page_preview: false
                }),
                muteHttpExceptions: true
            });
        
        if (response.getResponseCode() !== 200) {
            console.error('–û—à–∏–±–∫–∞ Telegram API:', response.getContentText());
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ multipart/form-data
 */ 
function parseMultipartFormData(e) {
    const boundary = e.postData.boundary;
    const parts = e.postData.contents.split(boundary);
    const result = {};
    
    for (let part of parts) {
        const nameMatch = part.match(/name="([^"]+)"/);
        if (!nameMatch) continue;
        
        const name = nameMatch[1];
        const start = part.indexOf('\r\n\r\n') + 4;
        const end = part.lastIndexOf('\r\n--');
        
        if (part.includes('filename="')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            result[name] = {
                filename: part.match(/filename="([^"]+)"/)[1],
                mimeType: part.match(/Content-Type:\s*([^\r\n]+)/)?.[1] || 'application/octet-stream',
                bytes: Utilities.newBlob(part.substring(start, end)).getBytes()
            };
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            result[name] = part.substring(start, end);
        }
    }
    
    return result;
}
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ HTTP –æ—Ç–≤–µ—Ç–∞
   */
  function createResponse(data, statusCode = 200) {
    const response = ContentService.createTextOutput(JSON.stringify(data));
    response.setMimeType(ContentService.MimeType.JSON);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ CORS
    try {
      response.setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏:', e);
    }
    
    return response;
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
   */
  function doOptions() {
    return createResponse({});
  }